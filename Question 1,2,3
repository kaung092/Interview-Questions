===========================================================================================================================================
1) Question

You send roughly 30 Million emails monthly through an email infrastructure service similar to SendGrid and Mandrill, called SparkPost.
SparkPost sends the message events associated with those email sends back to you via a post web hook so you can store and utilize them at
a later date. Attached to this email is an example json body that you would receive from Sparkpost. You can read a description of the 
events included in this json here: https://support.sparkpost.com/customer/portal/articles/1976204-webhook-event-reference.
Please describe the full stack of technologies you would use to receive the http requests webhook, process and store the data, and query
these records in a meaningful way in the future. Which fields seem like they would be important for customer analytics? Which might be 
important for other reasons? What reasons?
------------------------------------------------------------------------------------------------------------------------------------------
Answer:

	Backend 
		- Backend built with PHP, MySQL and Webservers like Nginx, Apache 
		- Memcache to reduce load on database while processing webhook posts.

	Important fields

		Type (eg. Engagement events, Unsubscribe events, Spam Complaint):
			These events can help us analyze customer behaviors.

		Recipient data (eg. rcpt_meta, rcpt_type):  	
			It can help us segment cusomter based on demographic data and their responses to email category. 

		Error/Failed data (error_code, bounce, delivery):
			It is important to keep track of technical issues in delivery.

		I would create different tables based Event Type with Foreign keys to more detailed tables like (Recipient Profiles, templates etc)
		- Message Events (Table)
		- Engagement Events (Table)
		- Generation Events (Table)
		- Unsubscribe Events (Table)
		- Relay Events (Table)

===========================================================================================================================================
2) Question

The following two questions do not necessarily have a specific right or wrong answer, thus the how and why are important.
What type of class or OOP programming structure would make sense to use in the following scenarios? How and Why?

2a. You are building an open source application framework, to handle sessions you would like to use Memcache by default but allow 
others to create modules for other session handling services.
2b. You have many classes which need to share some methods, some of these classes already extend another unrelated class, some do not.
------------------------------------------------------------------------------------------------------------------------------------------

Answer:

	2a. The default way of handing session would be to use Memcache, but we also want the developers who use this framework to
	have freedom to implement session handling with services other than Memcache. 
	
	Solution: 
		I would create an interface for session handling, with some use cases prebuilt. The interface should provide mechanism to
		let developers build their own modules for other session handling services.
	

	2b. Normally, I would use abstract class that have shared methods. But since some classes already extends another unrelated class,
	they cannot extends the abstract class. Therefore, I would create a helper class with static methods that can be directly accessed
	and shared by other classes.
	I chose this solution because I think we want to reduce the duplicate methods everywhere. We can use interfaces but it will 
	require each classes to implement the methods again.

===========================================================================================================================================

3) You have a Mysql table with 500 Million rows. The structure is the following:

CREATE TABLE `buildings` (
 `id` int(11) NOT NULL AUTO_INCREMENT,
 `name` varchar(255) NOT NULL,
 `type` enum('Highrise','Lowrise','Retail','Industrial') NOT NULL,
 `city` varchar(100) NOT NULL,
 PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8

A sample query that would often need to run on the database is “SELECT * FROM posts WHERE type = ? AND city = ? LIMIT 500000”. 
Would you add an index or indices to this table other than the primary index? What are the pros and cons of doing so?

Assuming there are no other related tables or different querying scenarios, do you think mysql is an optimal approach here?
Why or why not and what might an alternative be?

------------------------------------------------------------------------------------------------------------------------------------------
Answer:
	I would add multi-column index on (Type and City). It woul improve the performance of the query:
	“SELECT * FROM posts WHERE type = ? AND city = ? LIMIT 500000”
	
	Pros: 
		- Faster performance on SELECT queries on these columns
	Cons: 
		- More space required for extra index
		- Insert/Update operations need extra work to update second index
		
	Assuming there are no other related tables or different querying scenarios, the advantage of using SQL (like relational model) is
	taken away. I would, therefore, use NoSQL because its key-value store data model would create great performance. 
	
	
	
	
	
